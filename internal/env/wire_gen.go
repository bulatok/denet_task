// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package env

import (
	"context"
	"github.com/bulatok/denet_task/internal/api"
	"github.com/bulatok/denet_task/internal/config"
	"github.com/bulatok/denet_task/internal/usecase"
	"github.com/bulatok/denet_task/pkg/logger"
)

// Injectors from wire.go:

func InitWire(configPath string) (*Wire, error) {
	configConfig, err := config.NewConfig(configPath)
	if err != nil {
		return nil, err
	}
	bootStrap, err := usecase.NewBootStrap(configConfig)
	if err != nil {
		return nil, err
	}
	listener := api.NewListener(configConfig, bootStrap)
	wire := provideWire(listener, configConfig, bootStrap)
	return wire, nil
}

// wire.go:

type Wire struct {
	Lst  api.Listener
	boot *usecase.BootStrap
}

func (w *Wire) Flush(ctx context.Context) error {
	if err := w.Lst.ShutDown(ctx); err != nil {
		return err
	}
	if err := w.boot.Store.Close(); err != nil {
		return err
	}
	return nil
}

func provideWire(lst api.Listener, conf *config.Config, boot *usecase.BootStrap) *Wire {
	logger.Init(conf)
	return &Wire{
		Lst:  lst,
		boot: boot,
	}
}
